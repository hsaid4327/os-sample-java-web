pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }
    environment {
        DEV_PROJECT = "backbase-dev"
        QA_PROJECT = "backbase-qa"
        APP_GIT_URL = "https://github.com/hsaid4327/os-sample-java-web.git"
        

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "backbase-service"
    }
    stages {
        
       stage('Get source code') {
           
           
           steps {
               script{
                   git credentialsId: 'git-repo', url: 'https://github.com/hsaid4327/os-sample-java-web.git'
                   
               }
           }
       }
       // configmap are not deleted by oc deleta all. Need to do this step to aviod building them again with template which results in error 
      stage('check configmap in dev'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${DEV_PROJECT}" ) {
		        return openshift.selector("cm", "backbase-service-cm").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc delete configmap/${APP_NAME}-cm -n backbase-dev"
            
             }

          }     
      }  


       stage('Build Application in dev'){
           steps {
             script{
                 sh "oc project backbase-dev"
                 sh "oc delete all -l app=${APP_NAME}"

           
                 sh "oc process -f templates/backbase-svc-build-template.yaml -p APPLICATION_NAME=${APP_NAME} | oc create -f -"
                
                 
          }
         }
        }
        stage('Wait for S2I build to complete') {
            steps {
               script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                } 
  
            }
        }
       stage('Wait for deployment in DEV env') {
            steps {
                                      
                        sh '''
                        oc project ${DEV_PROJECT}


                        oc process -f templates/backbase-svc-deploy-template.yaml -p APPLICATION_NAME=${APP_NAME} -p APPLICATION_ENV=dev | oc create -f -
                        cp config/application-dev.properties config/application.properties
                        oc create configmap ${APP_NAME}-cm --from-file config/application.properties --dry-run -o yaml | oc replace -f -
                        oc label configmap/${APP_NAME}-cm app=${APP_NAME}
                  
                        '''            
                  
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                } 

            } 
            
       }
          stage('Promote to QA Env') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input message: "Promote to qa?"
                }
                script {
                    openshift.withCluster() {
                    openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${QA_PROJECT}/${APP_NAME}:qa")
                    }
                }
              }
            }   
           
       stage('check configmap in QA'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${QA_PROJECT}" ) {
		        return openshift.selector("cm", "backbase-service-cm").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc delete configmap/${APP_NAME}-cm -n backbase-qa"
            
             }

          }     
      }          
         
        stage('Wait for deployment in QA env') {
               steps {
                    echo '### Cleaning existing resources in Staging ###'
                     sh '''
                        oc project ${QA_PROJECT}
                        oc delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                      
                     sh '''
                        oc project ${QA_PROJECT}
                        oc process -f templates/backbase-svc-deploy-template.yaml -p APPLICATION_NAME=${APP_NAME} -p APPLICATION_ENV=qa | oc create -f -
                       
                   '''
                      
                     sh '''cp config/application-qa.properties config/application.properties
                           oc create configmap ${APP_NAME}-cm --from-file config/application.properties --dry-run -o yaml | oc replace -f -
                           oc label configmap/${APP_NAME}-cm app=${APP_NAME}'''

                      echo '### Creating a new app in QA ###'

      
                
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${QA_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
            
   }        
        
    
}
