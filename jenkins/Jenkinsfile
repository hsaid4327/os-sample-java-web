
peline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }
    environment {
        DEV_PROJECT = "backbase-dev"
        QA_PROJECT = "backbase-qa"
        APP_GIT_URL = "https://github.com/hsaid4327/os-sample-java-web.git"
        

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "backbaseservice"
    }
    stages {
        
       stage('Get source code') {
           steps {
               script{
                   git credentialsId: 'git-repo', url: 'https://github.com/hsaid4327/os-sample-java-web.git'
                   
               }
           }
       }
        
        stage('Build Application in dev'){
         steps {
          script{
          sh "oc project backbase-dev"
          sh '''cp os-sample-java-web/config/application-dev.properties os-sample-java-web/config/application.properties
                oc create configmap ${APP_NAME}-cm --from file os-sample-java-web/config/application.properties --dry-run -o yaml | oc create -f -'''
          sh '''oc set triggers dc/${APP_NAME} --disabled
                oc start-build ${APP_NAME}
                 '''
          }
         }
        }
        stage('Wait for S2I build to complete') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }
       stage('Wait for deployment in DEV env') {
            steps {
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
          stage('Promote to QA Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to qa?"
                }
                script {
                    openshift.withCluster() {
                    openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${QA_PROJECT}/${APP_NAME}:qa")
                    }
                }
              }
            }   
       stage('Wait for deployment in QA env') {
            steps {
               echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc project ${QA_PROJECT}
                        oc delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                echo '### Creating a new app in Staging ###'
                sh '''
                        oc project ${QA_PROJECT}
                        oc process -f os-sample-java-web/templates/backbase-svc-deploy-template.yaml -p APPLICATION_NAME=${APP_NAME} -p APPLICATION_ENV=qa | oc create -f -
                       
                   '''
                             sh '''cp os-sample-java-web/config/application-qa.properties os-sample-java-web/config/application.properties
                oc create configmap ${APP_NAME}-cm --from file os-sample-java-web/config/application.properties --dry-run -o yaml | oc create -f -'''
                   
            
                
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${QA_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
            
   }        
        
    
}
      

peline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }
    environment {
        DEV_PROJECT = "backbase-dev"
        QA_PROJECT = "backbase-qa"
        APP_GIT_URL = "https://github.com/hsaid4327/os-sample-java-web.git"
        

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "backbaseservice"
    }
    stages {
        stage('Build Application in dev'){
         steps {
          script{
          sh '''oc set triggers dc/${APP_NAME} --disabled
                oc start-build ${APP_NAME}
                 '''
          }
         }
        }
        stage('Wait for S2I build to complete') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }
       stage('Wait for deployment in DEV env') {
            steps {
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
          stage('Promote to QA Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to qa?"
                }
                script {
                    openshift.withCluster() {
                    openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${QA_PROJECT}/${APP_NAME}:qa")
                    }
                }
              }
            }   
       stage('Wait for deployment in QA env') {
            steps {
               echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc project ${QA_PROJECT}
                        oc delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                echo '### Creating a new app in Staging ###'
                sh '''
                        oc project ${QA_PROJECT}
                        oc new-app --name ${APP_NAME} -i ${APP_NAME}:qa
                        oc expose svc/${APP_NAME}
                   '''
            
                
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${QA_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
            
   }        
        
    
}
      
pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }
    environment {
        DEV_PROJECT = "backbase-dev"
        QA_PROJECT = "backbase-qa"
        APP_GIT_URL = "https://github.com/hsaid4327/os-sample-java-web.git"
        

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "backbaseservice"
    }
    stages {
        stage('Build Application in dev'){
         steps {
          script{
          sh '''oc set triggers dc/${APP_NAME} --disabled
                oc start-build ${APP_NAME}
                 '''
          }
         }
        }
        stage('Wait for S2I build to complete') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }
       stage('Wait for deployment in DEV env') {
            steps {
                script {
                    sh 'oc set triggers dc/${APP_NAME} --disabled -n ${QA_PROJECT}'
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
          stage('Promote to QA Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to qa?"
                }
                script {
                    openshift.withCluster() {
                    openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${QA_PROJECT}/${APP_NAME}:qa")
                    }
                }
              }
            }   
       stage('Wait for deployment in QA env') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${QA_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
            
   }        
        
    
}
      

