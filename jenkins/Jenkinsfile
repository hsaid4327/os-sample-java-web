pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'maven'
      }
    }
    environment {
        DEV_PROJECT = "backbase-dev"
        QA_PROJECT = "backbase-qa"
        APP_GIT_URL = "https://github.com/hsaid4327/os-sample-java-web.git"
        

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "backbase-service"
    }
    stages {
        
       stage('Get source code') {
           
           
           steps {
               script{
                   git credentialsId: 'git-repo', url: 'https://github.com/hsaid4327/os-sample-java-web.git'
                   
               }
           }
       }

    
    // verify that buildConfig exists and starts the build
      
      stage('verify and start build'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${DEV_PROJECT}" ) {
		        return openshift.selector("bc", "${APP_NAME}").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc start-build ${APP_NAME}"
            
             }

          }     
      }  
       
     // if the buildconfig does not exist, use the template to create it
       stage('verify and create build objects'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${DEV_PROJECT}" ) {
		        return !openshift.selector("bc", "${APP_NAME}").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc process -f templates/backbase-svc-build-template.yaml -p APPLICATION_NAME=${APP_NAME} | oc create -f -"
            
             }

          }     
      }      


        
     stage('Wait for S2I build to complete') {
            steps {
               script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                } 
  
            }
        }
       
     // if the deployment objects do not exist in dev, use the template to create it
       stage('verify and create deployment objects'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${DEV_PROJECT}" ) {
		        return !openshift.selector("dc", "${APP_NAME}").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc process -f templates/backbase-svc-build-template.yaml -p APPLICATION_NAME=${APP_NAME} | oc create -f -"
                 sh "oc process -f templates/backbase-svc-deploy-template.yaml -p APPLICATION_NAME=${APP_NAME} -p APPLICATION_ENV=dev | oc create -f -"
            
             }

          }     
      }      
       
      
     stage('Wait for deployment in DEV env') {
            steps {
                                      
                        sh '''
                        oc project ${DEV_PROJECT}
                        cp config/application-dev.properties config/application.properties
                        oc create configmap ${APP_NAME}-cm --from-file config/application.properties --dry-run -o yaml | oc replace -f -
                   
                        '''            
                  
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                } 

            } 
            
       }
          
    
       stage('Promote to QA Env') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input message: "Promote to qa?"
                }
                script {
                    openshift.withCluster() {
                    openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${QA_PROJECT}/${APP_NAME}:qa")
                    }
                }
              }
            }   
           

      // if the deployment objects do not exist in qa, use the template to create it
       stage('verify and create deployment objects'){
	       when {
		expression {
		  openshift.withCluster(){
                     openshift.withProject( "${QA_PROJECT}" ) {
		        return !openshift.selector("dc", "${APP_NAME}").exists();
                    }
		  }
		}
	      }         
          steps{
               script{
                 
                 sh "oc process -f templates/backbase-svc-build-template.yaml -p APPLICATION_NAME=${APP_NAME} | oc create -f -"
                 sh "oc process -f templates/backbase-svc-deploy-template.yaml -p APPLICATION_NAME=${APP_NAME} -p APPLICATION_ENV=dev | oc create -f -"
            
             }

          }     
      }              
        

      stage('Wait for deployment in QA env') {
               steps {
                        sh '''
                        oc project ${QA_PROJECT}
                        cp config/application-dev.properties config/application.properties
                        oc create configmap ${APP_NAME}-cm --from-file config/application.properties --dry-run -o yaml | oc replace -f -
                   
                        '''      
      
                
                script {
                    
                    openshift.withCluster() {
                        openshift.withProject( "${QA_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout().latest()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
       }
            
   }        
        
    
}
